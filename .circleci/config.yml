# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  aws-s3: circleci/aws-s3@3.0.0
  aws-cli: circleci/aws-cli@2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/packages/tajweed_rules_library  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          working_directory: ~/project/packages/tajweed_rules_library
          # This assumes pytest is installed via the install-package step above
          command: python -m unittest -v 
      - run:
          name: Run test coverage
          working_directory: ~/project/packages/tajweed_rules_library
          # This assumes pytest is installed via the install-package step above
          command: coverage run -m unittest && coverage report --omit=*factory.py,*app.py,*test_*.py,src/*__init__.py,src/*/__init__.py
  s3-deploy2:
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
  
    parameters:
      aws-access-key-id:
          default: AWS_ACCESS_KEY_ID
          description: aws access key id override
          type: env_var_name
      aws-region:
          default: AWS_REGION
          description: aws region override
          type: env_var_name
      aws-secret-access-key:
          default: AWS_SECRET_ACCESS_KEY
          description: aws secret access key override
          type: env_var_name
      to:
          default: 's3://tajweed-app/library/rule_maps'
          description: S3 destination
          type: string
    steps:
        - checkout
        - python/install-packages:
            pkg-manager: pip
            app-dir: ~/project/packages/tajweed_rules_library
        - aws-cli/setup:
            aws-access-key-id: << parameters.aws-access-key-id >>
            aws-region: << parameters.aws-region >>
            aws-secret-access-key: << parameters.aws-secret-access-key >>
        - run:
            name: Get path of updated JSON files
            working_directory: ~/project/packages/tajweed_rules_library
            # This assumes pytest is installed via the install-package step above
            command: |
              echo 'export CHANGES=$(git diff --name-only main...develop | grep ^packages/tajweed_rules_library/src/dist/)' >> $BASH_ENV
        - run:
            name: Kill job if not recent updates
            working_directory: ~/project/packages/tajweed_rules_library
            # This assumes pytest is installed via the install-package step above
            command: |
              echo changes $CHANGES and name $NAME
              if [ "$CHANGES" = "" ]; then
                  circleci-agent step halt
              fi
        - run:
            name: Check if changed file is in S3
            working_directory: ~/project/packages/tajweed_rules_library
            command: |
              for val in $CHANGES;
              do
                NAME=$(cut -d'/' -f5 \<<< $val)
                aws s3api head-object --bucket s3://tajweed-app/library/rule_maps --key $NAME || not_exist=true
                if [ $not_exist ]; then
                  echo $NAME "it does not exist"
                else
                  echo $NAME "it exists"
                fi
              done
  s3-deploy:        
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/packages/tajweed_rules_library
      - run:
          name: Get path of updated JSON files
          working_directory: ~/project/packages/tajweed_rules_library
          # This assumes pytest is installed via the install-package step above
          command: |
            echo 'export CHANGES=$(git diff --name-only main...develop | grep ^packages/tajweed_rules_library/src/dist/)' >> $BASH_ENV
      - run:
          name: Get name of updated JSON rule from file path
          working_directory: ~/project/packages/tajweed_rules_library
          # This assumes pytest is installed via the install-package step above
          command: |
            echo $CHANGES
            for val in $CHANGES;
            do 
              echo $val
            done

            # array=()
            # array+=($(cut -d' ' -f1 \<<< $CHANGES))
            # array+=($(cut -d' ' -f2 \<<< $CHANGES))

            # echo 'export PATH=$array' >> $BASH_ENV
            # echo $PATH_ARRAY
            # echo 'export NAME=$(cut -d'/' -f5 \<<< $CHANGES)' >> $BASH_ENV
      - run:
          name: Kill job if not recent updates
          working_directory: ~/project/packages/tajweed_rules_library
          # This assumes pytest is installed via the install-package step above
          command: |
            echo changes $CHANGES and name $NAME
            if [ "$CHANGES" = "" ]; then
                circleci-agent step halt
            fi
      - run:
          name: Check if changed file is in S3
          working_directory: ~/project/packages/tajweed_rules_library
          command: |
            for val in $CHANGES;
            do
              NAME=$(cut -d'/' -f5 \<<< $val)
              aws s3api head-object --bucket s3://tajweed-app/library/rule_maps --key $val || not_exist=true
              if [ $not_exist ]; then
                echo $val "it does not exist"
              else
                echo $val "it exists"
              fi
            done
      - aws-s3/copy: 
          arguments: |
            --cache-control "max-age=86400"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          from: '~/project/$CHANGES'
          to: 's3://tajweed-app/library/rule_maps/$NAME'
  
          

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - s3-deploy2:
          requires:
            - build-and-test
          filters:
            branches:
              only: develop
